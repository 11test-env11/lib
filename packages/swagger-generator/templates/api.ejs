<%
const { utils, route, config, modelTypes } = it;
const { _, pascalCase, require } = utils;
const apiClassName = pascalCase(route.moduleName);
const routes = route.routes;
const dataContracts = _.map(modelTypes, "name");


const TemplateLiteralRegex = /\$\{([^}]+)\}/g

const toCamelCase = (str) => str.replace(TemplateLiteralRegex, '$1') // 템플릿 리터럴 제외
  .replace(/[^a-zA-Z0-9]+(.)/g, (match, chr) => chr.toUpperCase()) // 첫 단어 제외, 각 단어 첫 글자를 대문자로 변환
  .replace(/^[A-Z]/, (firstLetter) => firstLetter.toLowerCase());  // 첫 번째 단어의 첫 글자는 소문자로 변환

%>

<% if (config.httpClientType === config.constants.HTTP_CLIENT.AXIOS) { %> import type { AxiosRequestConfig, AxiosResponse } from "axios"; <% } %>

import { HttpClient, RequestParams, ContentType, HttpResponse } from "./<%~ config.fileNames.httpClient %>";
<% if (dataContracts.length) { %>
import { <%~ dataContracts.join(", ") %> } from "./<%~ config.fileNames.dataContracts %>"
<% } %>

<% if (dataContracts.length) {%>
import { <%~ dataContracts.map((v)=>toCamelCase(v+"Schema")).join(", ") %> } from "./schema"
<% } %>

export class <%= apiClassName %><SecurityDataType=unknown><% if (!config.singleHttpClient) { %> extends HttpClient<SecurityDataType> <% } %> {
    <% if(config.singleHttpClient) { %>
    http: HttpClient<SecurityDataType>;

      constructor (http: HttpClient<SecurityDataType>) {
        this.http = http;
        }
        <% } %>

        <% for (const route of routes) { %>
        <%~ includeFile('./procedure-call.ejs', { ...it, route }) %>
        <% } %>
        }